#!/usr/bin/env python3

"""
Webcam Publisher Node

This node captures images from a laptop webcam and publishes them to ROS2 topics.

Published Topics:
    /camera/image_raw (sensor_msgs.msg.Image)
    /camera/camera_info (sensor_msgs.msg.CameraInfo)

Author: Generated by Copilot
"""

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge
import cv2
import numpy as np


class WebcamPublisher(Node):
    def __init__(self):
        super().__init__('webcam_publisher')

        # Create publishers
        self.image_pub = self.create_publisher(Image, '/image_raw', 10)
        self.info_pub = self.create_publisher(CameraInfo, '/camera_info', 10)

        # CV Bridge
        self.bridge = CvBridge()

        # Open webcam
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            self.get_logger().error('Cannot open webcam')
            return

        # Set camera info (basic defaults for webcam)
        self.camera_info = CameraInfo()
        self.camera_info.header.frame_id = 'camera_link'
        self.camera_info.height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        self.camera_info.width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        # Simple pinhole model
        self.camera_info.distortion_model = 'plumb_bob'
        # Focal length approximation (adjust as needed)
        fx = fy = min(self.camera_info.width, self.camera_info.height) * 0.8
        cx = self.camera_info.width / 2.0
        cy = self.camera_info.height / 2.0
        self.camera_info.k = [fx, 0.0, cx, 0.0, fy, cy, 0.0, 0.0, 1.0]
        self.camera_info.d = [0.0, 0.0, 0.0, 0.0, 0.0]  # No distortion

        # Timer to publish at ~30 Hz
        self.timer = self.create_timer(1.0/30.0, self.timer_callback)

        self.get_logger().info('Webcam publisher started')

    def timer_callback(self):
        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().warn('Failed to capture frame')
            return

        # Convert to ROS Image
        ros_image = self.bridge.cv2_to_imgmsg(frame, encoding='bgr8')
        ros_image.header.stamp = self.get_clock().now().to_msg()
        ros_image.header.frame_id = 'camera_link'

        # Publish image
        self.image_pub.publish(ros_image)

        # Publish camera info
        self.camera_info.header.stamp = ros_image.header.stamp
        self.info_pub.publish(self.camera_info)

    def destroy_node(self):
        self.cap.release()
        super().destroy_node()


def main(args=None):
    rclpy.init(args=args)
    node = WebcamPublisher()
    rclpy.spin(node)

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()